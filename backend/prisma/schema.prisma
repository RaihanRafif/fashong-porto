// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())

  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String

  // --- KOLOM BARU DITAMBAHKAN ---
  // Menambahkan kolom baru sesuai data CSV Anda.
  // @default(0) berarti jika data tidak ada, nilainya akan menjadi 0.
  stock        Int      @default(0)
  shopName     String?  // Tanda tanya (?) berarti kolom ini opsional (bisa null)
  rating       Float    @default(0.0)
  reviewsCount Int      @default(0)
  // --------------------------------

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relasi ke Kategori tetap sama
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
}

// Model Category tidak perlu diubah
model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}


// --- MODEL UNTUK EKSPANSI DI MASA DEPAN (Opsional) ---
// Anda bisa meng-uncomment model ini jika ingin menambahkan fitur pengguna dan pemesanan nanti.
/*
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String    // Ingat untuk melakukan hashing pada password!
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  totalAmount Decimal     @db.Decimal(10, 2)
  status      String      // Contoh: "PENDING", "PAID", "SHIPPED"
  items       OrderItem[]
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  price      Decimal @db.Decimal(10, 2) // Harga per item saat dibeli
}
*/